# Template file for 'proton-authenticator'
pkgname=proton-authenticator
version=1.1.3
revision=1
archs="x86_64"
makedepends="binutils libarchive"
depends="cairo dbus libgcc gdk-pixbuf glib gtk+3 hicolor-icon-theme libsoup pango webkit2gtk"
short_desc="Open source and available on every device. Securely sync and backup your 2FA codes easily"
maintainer="Pierre Sabbagh <sabbaghpierre@proton.me>"
license="GPL-3.0-or-later"
homepage="https://proton.me/authenticator"
distfiles="https://proton.me/download/authenticator/linux/ProtonAuthenticator_${version}_amd64.deb"
checksum=0c9d48aaec91932ec5d4cc4242d942f1890d96788556b1af5213f0152f812dfc

do_install() {
    # Find .deb file
    deb_file="$(find "${XBPS_SRCDISTDIR}" -iname "*ProtonAuthenticator*.deb" | head -n1)"
    [ -z "${deb_file}" ] && msg_red "Error: .deb file not found\n" && exit 1

    # Create temporary directory for extraction
    local tmpdir=$(mktemp -d)

    # Extract the data.tar.xz from the .deb file
    msg_normal "Extracting data from ${deb_file##*/}...\n"

    # First extract the .deb to get data.tar.xz
    bsdtar -xf "${deb_file}" -C "${tmpdir}"

    # Then extract data.tar.xz to the destination
    if [ -f "${tmpdir}/data.tar.xz" ]; then
        bsdtar -xf "${tmpdir}/data.tar.xz" -C "${DESTDIR}"
    elif [ -f "${tmpdir}/data.tar.gz" ]; then
        bsdtar -xf "${tmpdir}/data.tar.gz" -C "${DESTDIR}"
    else
        msg_error "No data archive found in .deb file\n"
        rm -rf "${tmpdir}"
        exit 1
    fi

    # Fix desktop file for Wayland+Nvidia and X11 compatibility
    if [ -f "${DESTDIR}/usr/share/applications/Proton Authenticator.desktop" ]; then
        msg_normal "Fixing desktop file...\n"
        sed -i 's/Exec=proton-authenticator/Exec=env WEBKIT_DISABLE_DMABUF_RENDERER=1 proton-authenticator/' \
            "${DESTDIR}/usr/share/applications/Proton Authenticator.desktop"
    fi

    # Ensure binary is executable
    if [ -f "${DESTDIR}/usr/bin/ProtonAuthenticator" ]; then
        chmod +x "${DESTDIR}/usr/bin/ProtonAuthenticator"
    fi

    # Clean up temporary directory
    rm -rf "${tmpdir}"
}
